import { useEffect, useMemo } from "react";
import { UseQueryResult } from "react-query";
import { useParams, useNavigate } from "react-router-dom";
import { VulnerabilitiesGridRow } from "../../../shared/types";
import RoutePaths from "../../Route/RoutePaths";
import { validVulnerabilitiesGridList } from "../../utils";
import useLibrarySelection from "../LibrarySelectBox/hooks/useLibrarySelection";

interface VulnerabilityDisplayProps {
  onQueryFetched?: (
    query: UseQueryResult<Error | VulnerabilitiesGridRow[]>,
    libraryName: string
  ) => void;
}

export default function VulnerabilityDisplay({
  onQueryFetched,
}: VulnerabilityDisplayProps) {
  const { id: libraryName } = useParams();
  const { handleSetParams, vulnerabilityResultQuery } = useLibrarySelection();
  const navigate = useNavigate();

  useEffect(() => {
    handleSetParams(libraryName);
  }, [libraryName, handleSetParams]);

  useEffect(() => {
    onQueryFetched(vulnerabilityResultQuery, libraryName);
  }, [onQueryFetched, vulnerabilityResultQuery, libraryName]);

  const vulnerability = useMemo<VulnerabilitiesGridRow>(
    () =>
      validVulnerabilitiesGridList(vulnerabilityResultQuery.data) &&
      vulnerabilityResultQuery.data.find((e) => e.name === libraryName),
    [vulnerabilityResultQuery]
  );

  return (
    <div>
      <button
        onClick={() => {
          navigate(new RoutePaths().root);
        }}
      >
        back
      </button>
      {vulnerabilityResultQuery.isLoading && <div>Loading...</div>}
      {vulnerabilityResultQuery.isError && <div>Error</div>}
      {vulnerabilityResultQuery.isSuccess && vulnerability != null && (
        <div>{vulnerability.summary}</div>
      )}
    </div>
  );
}
